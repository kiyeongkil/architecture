pipeline {
  agent any

  parameters {
    booleanParam(name : 'COMPILE_MVN', defaultValue : true, description: 'COMPILE_MVN')
    booleanParam(name : 'BUILD_MVN', defaultValue : true, description: 'BUILD_MVN')
    booleanParam(name : 'BUILD_DOCKER_IMAGE', defaultValue : true, description: 'BUILD_DOCKER_IMAGE')
    booleanParam(name : 'PUSH_DOCKER_IMAGE', defaultValue : true, description: 'PUSH_DOCKER_IMAGE')
    booleanParam(name : 'DEPLOY_WORKLOAD', defaultValue : true, description: 'DEPLOY_WORKLOAD')

    string(name : 'AWS_ACCOUNT_ID', defaultValue : '364481446289', description : 'AWS_ACCOUNT_ID')
    string(name : 'DOCKER_IMAGE_NAME', defaultValue : 'demo', description : 'DOCKER_IMAGE_NAME')
    string(name : 'DOCKER_TAG', defaultValue : '1', description : 'DOCKER_TAG')
  }

  environment {
    REGION = "ap-northeast-2"
    ECR_REPOSITORY = "${params.AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com"
    DOCKER_IMAGE = "${ECR_REPOSITORY}/${params.DOCKER_IMAGE_NAME}:${params.DOCKER_TAG}"
  }

  stages {
    stage('========== COMPILE_MVN =========='){
      when {
        expression { return params.COMPILE_MVN }
      }
      steps{
        withMaven(maven : 'MAVEN') {
          sh 'mvn clean compile -f ./sample_app_spring/pom.xml'
        }
      }
    }

    stage('========== BUILD_MVN ==========') {
      when {
        expression { return params.BUILD_MVN }
      }
      steps {
        withMaven(maven : 'MAVEN') {
          sh 'mvn -Dmaven.test.failure.ignore=true install -f ./sample_app_spring/pom.xml'
        }
      }
    }

    stage('========== BUILD_DOCKER_IMAGE ==========') {
      when {
        expression { return params.BUILD_DOCKER_IMAGE }
      }
      steps {
        dir("${env.WORKSPACE}") {         //jenkins pipeline 구동시 defualt로 세팅되는 환경변수
          sh 'docker build -t ${DOCKER_IMAGE} ./sample_app_spring/'   //dir로 접근하여 sh 명령 수행
        }
      }
      post {
        always {
          echo "post stage"
        }
      }
    }

    stage('========== PUSH_DOCKER_IMAGE ==========') {
      when {
        expression { return params.PUSH_DOCKER_IMAGE }
      }
      steps {
        echo "Push Docker Image to ECR"
        sh '''
          aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}
          docker push ${DOCKER_IMAGE}
        '''
      }
    }

    stage('========== DEPLOY_WORKLOAD ==========') {
      when {
        expression { return params.DEPLOY_WORKLOAD }
      }
      steps {
        echo "Deploy workload"
      }
    }
  }

  post {
    cleanup {
      echo "Post cleanup"
    }
  }
}